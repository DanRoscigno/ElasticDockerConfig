# Lines 6 - 53 are a Kubernetes ConfigMap (allows us to use the standard Filebeat Docker image without 
# modification and provide our own config file into it).  If you look at line 14 you will see the filebeat.yml
# being created.  It matches the file described in the slides in the demo.  Later on in this file you will see 
# the file get mounted inside the running container.

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-dynamic-config
  namespace: kube-system
  labels:
    k8s-app: filebeat-dynamic
    kubernetes.io/cluster-service: "true"
data:
  filebeat.yml: |-
    setup.dashboards.enabled: true
    setup.template.enabled: true

    filebeat.autodiscover:
      providers:
        - type: kubernetes
          templates:
            - condition.equals:
                kubernetes.labels.app: nginx
              config:
                - module: nginx
                  access:
                    prospector:
                      type: docker
                      containers.ids:
                        - ${data.kubernetes.container.id}
                  error:
                    prospector:
                      type: docker
                      containers.ids:
                        - ${data.kubernetes.container.id}

    processors:
      - add_cloud_metadata:
      - add_kubernetes_metadata:
      - add_docker_metadata:

    cloud.auth: ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}
    cloud.id: ${CLOUD_ID}

    output.elasticsearch:
      ssl:
        certificate_authorities: ["/etc/certificate/ece-demo-server.pem"]

    setup.kibana:
      ssl:
        certificate_authorities: ["/etc/certificate/ece-demo-server.pem"]
    
---
# Lines 63 - 145 define a DaemonSet.  A DaemonSet makes sure that each Node runs a copy of this Pod.  The three 
# examples in the docs are 1) Storage daemon like ceph, 2) Logging daemon like Logstash, and 3) Monitoring daemon 
# like collectd. There are three Nodes in our cluster, and during the demo you will see that there are three Pods 
# returned by kubectl get pods --namespace=kube-system.  If you look at the configuration below you will see the 
# init command (-c /etc/filebeat.yml -e), resource limits, mount points, volumes, and the user (filebeat-dynamic)
# running the Pod processes (at the end of the file we create the user).  Docs are at:
# https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/

apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: filebeat-dynamic
  namespace: kube-system
  labels:
    k8s-app: filebeat-dynamic
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: filebeat-dynamic
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: filebeat-dynamic
      terminationGracePeriodSeconds: 30
      containers:
      - name: filebeat-dynamic
        image: us.gcr.io/elastic-product/filebeat:6.2.0-bc5
        imagePullPolicy: Always
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        env:
        - name: CLOUD_ID
          valueFrom:
            secretKeyRef:
              name: dynamic-logging
              key: CLOUD_ID
        - name: ELASTIC_USERNAME
          valueFrom:
            secretKeyRef:
              name: dynamic-logging
              key: ELASTIC_USERNAME
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dynamic-logging
              key: ELASTIC_PASSWORD
        securityContext:
          runAsUser: 0
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: dockersock
          mountPath: /var/run/docker.sock
        - name: certificate
          mountPath: /etc/certificate/ece-demo-server.pem
          readOnly: true
          subPath: ece-demo-server.pem
      volumes:
      - name: config
        configMap:
          defaultMode: 0600
          name: filebeat-dynamic-config
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: data
        emptyDir: {}
      - name: certificate
        configMap:
          defaultMode: 0400
          name: certificate
---

# Lines 151 - 162 define a ClusterRoleBinding.  In this case the ClusterRole is defined on lines 169 - 184 below, 
# and the user is the ServiceAccount named filebeat-dynamic defined at the end of the file.

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: filebeat-dynamic
subjects:
- kind: ServiceAccount
  name: filebeat-dynamic
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: filebeat-dynamic
  apiGroup: rbac.authorization.k8s.io
---

# Lines 169 - 184 give read access (get, watch, list) at the Cluster level (because this is a Cluter Role rather 
# than a plain Role or a roll with butter. 'Watch' allows users with this role to monitor for changes (like a new pod
# coming up)

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: filebeat-dynamic
  labels:
    k8s-app: filebeat-dynamic
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - pods
  verbs:
  - get
  - watch
  - list
---

# Lines 190 - 196 define a service account named filebeat-dynamic that will be allowed to run the processes in the 
# filebeat Pods within the kube-system namespace.  If we did not define a service account, then the processes would be owned by a user 
# named 'default'

apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat-dynamic
  namespace: kube-system
  labels:
    k8s-app: filebeat-dynamic
